#!/bin/sh
#
# Download updated PCI-Ids and kernel .debs 

set -u
set -e
# set -x

CLEANUP=true
# CLEANUP=false

PCIIDURL="http://pciids.sourceforge.net/v2.2/pci.ids"
PCIIDFILE="pci.ids"

# Note that if the architecture being targeted by the script is changed,
# KERNERLRE will need changing too.
ARCH="i386"
KERNELRE='linux-image-2.6.[0-9]+-[0-9]-686$'
# ARCH="amd64"
# KERNELRE='linux-image-2.6.[0-9]+-[0-9]-amd64$'


TARGET=${1-.}

if [ ! -d "$TARGET" ]
then
  echo "E: Target directory doesn't exist."
  echo "E: Please create '$TARGET'"
  exit 1
fi

if [ ! -f kernels.list ]
then
  cat <<EOF
E: couldn't find kernels.list config file
Format of file should be:
    distname,    deb url release sections,     packageregexp"
where:
  distname      is 'sid' 'lenny' etc
  deb url ...   is a valid line for an apt source.list
  packageregexp is an aptitude search pattern that will match the desired
                kernel. Default is '$KERNELRE'
EOF
  exit 1
fi

TEMPDIR=$(mktemp -t -d piccy_update.XXXXXX)

trap "if $CLEANUP; then /bin/rm -rf $TEMPDIR ; fi; exit 1" EXIT INT QUIT

# Fetch the PCI-Ids
wget -q -O $TEMPDIR/pci.ids http://pciids.sourceforge.net/v2.2/pci.ids
mv $TEMPDIR/pci.ids $TARGET/


# Make short replacement for /usr/bin/gpgv to suppress apt's warnings
# about keys for these repositories. The text of this was generated
# by looking at the dialogue between apt-get update and gpgv by running
# (as root):
#     /usr/bin/gpgv --status-fd 1 --ignore-time-conflict \
#      --keyring /etc/apt/trusted.gpg \
#     $WD/var/lib/apt/lists/partial/ftp.uk.debian.org_debian_dists_sid_Release.gpg \
#     $WD/var/lib/apt/lists/ftp.uk.debian.org_debian_dists_sid_Release
echo \
'#!/bin/sh
FD=${2-1}
cat <<EOF 1>&$FD
[GNUPG:] SIG_ID qs2dE7AubJyiH5mphDt+perNiA0 2009-02-25 1235551571
[GNUPG:] GOODSIG A70DAF536070D3A1 Debian Archive Automatic Signing Key (4.0/etch) <ftpmaster@debian.org>
gpgv: Good signature from "Debian Archive Automatic Signing Key (4.0/etch) <ftpmaster@debian.org>"
[GNUPG:] VALIDSIG A99951DAF9BB569BDB50AD90A70DAF536070D3A1 2009-02-25 1235551571 0 3 0 17 2 00 A99951DAF9BB569BDB50AD90A70DAF536070D3A1
EOF
' > $TEMPDIR/fakegpgv
chmod +x $TEMPDIR/fakegpgv


grep -v '^#' kernels.list | 
while read line    # read from kernels.list config file
do
  echo "========================================================================"
  #echo $line
  NAME=$(echo "$line" | awk -F, '{print $1}' | awk '{$1=$1;print}')
  SRC=$(echo "$line" | awk -F, '{print $2}' | awk '{$1=$1;print}')
  MATCH=$(echo "$line" | awk -F, '{print $3}' | awk '{$1=$1;print}')

  MATCH=${MATCH:-$KERNELRE}

  echo "Release: '$NAME' from '$SRC'"
  echo "Kernel pattern: '$MATCH'"

  # Separate the working directory for each of the releases
  WD="$TEMPDIR/$NAME"

  # Create some of the directories that will be required so that apt
  # doesn't complain
  for d in /etc/apt/apt.conf.d \
           /var/lib/apt/lists/partial \
           /var/cache/apt/archives/partial \
           /var/lib/dpkg/
  do
    mkdir -p $WD$d
  done
  touch $WD/var/lib/dpkg/status

  APTARGS="-o quiet=1000
           -o Debug::NoLocking=true
           -o Dir::State=$WD/var/lib/apt
           -o Dir::State::status=$WD/var/lib/dpkg/status
           -o Dir=$WD
           -o APT::Architecture=$ARCH
           -o APT::Get::AllowUnauthenticated=true
           -o Dir::Bin::gpg=$TEMPDIR/fakegpgv
"
#            -o Aptitude::Debtags-Binary=/bin/true

  # Create the sources.list and then grab the Packages file
  echo "$SRC" > $WD/etc/apt/sources.list
  apt-get $APTARGS update

  # Find the latest version of the kernel that matches the regexp
  KERNEL=$(aptitude $APTARGS search ~n"$MATCH" -F'%p' | tail -1)

  if [ -z "$KERNEL" ]
  then
    echo "E: No package matching '$MATCH' could not be found for release $NAME"
    continue
  fi

  # Work out what actual filename of the kernel package will be and the
  # version string of the kernel
  KERNELDEB=$(apt-cache $APTARGS show $KERNEL | sed -n "s,Filename:\s*.*/\([^/]*\),\1,p")
  VER=$(echo $KERNEL | sed "s,linux-image-\(.*\),\1,")

  (cd $WD && aptitude $APTARGS download $KERNEL > /dev/null)

  # Because aptitude download is run in a subshell, its failure won't
  # cause the entire script to die. Note the failure and keep going.
  if [ ! -f $WD/$KERNELDEB ]
  then
    echo "E: Package '$KERNEL' could not be found for release $NAME"
    continue
  fi

  # Unpack the kernel package and create the modules map
  dpkg -x $WD/$KERNELDEB $WD
  /sbin/depmod -b $WD $VER

  # Copy out the map file and kernel config
  cp $WD/lib/modules/*/modules.pcimap $TARGET/modules.pcimap-$NAME
  cp $WD/boot/config-* $TARGET/config-$NAME

  # Clean up the downloads so far to reduce disk usage during multiple updates
  rm -rf $WD
done

# Clean up the tempdir before exit
if $CLEANUP
then 
  /bin/rm -rf $TEMPDIR
fi

exit 0
