#!/bin/sh
#
# Refresh the data for the Piccy supybot plugin.
#
#   Downloads updated PCI-Ids and kernel .debs, see README for details.
#
###
# Copyright (c) 2009 Stuart Prescott
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions, and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions, and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the author of this software nor the name of
#     contributors to this software may be used to endorse or promote products
#     derived from this software without specific prior written consent.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###

set -u
set -e
# set -x

CLEANUP=true
# CLEANUP=false

PCIIDURL="http://pciids.sourceforge.net/v2.2/pci.ids"
PCIIDFILE="pci.ids"

WIKIMAPURL="http://wiki.debian.org/DeviceDatabase/ModuleToWikipageMap?action=raw"
WIKIMAPFILE="modules.wikilinks"

# Note that if the architecture being targeted by the script is changed,
# KERNERLRE will need changing too.
ARCH="i386"
KERNELRE='linux-image-2.6.[0-9]+-[0-9]-686$'
# ARCH="amd64"
# KERNELRE='linux-image-2.6.[0-9]+-[0-9]-amd64$'

usage() {
  PROG=$(basename "$0")
  cat <<EOF

Usage: $PROG [kernels.list] [data_directory]

If kernels.list is not specified, a file in the cwd or in the same location
as the script itself will be used.

If data_directory is not specified, cwd will be used if there is existing data
in that directory already (e.g. pci.ids file and a versions file).

Format of kernels.list file should be:
    distname,    deb url release sections,     packageregexp"
where:
  distname      is 'sid' 'lenny' etc
  deb url ...   is a valid line for an apt source.list
  packageregexp is an aptitude search pattern that will match the desired
                kernel. Default is '$KERNELRE'
EOF
  exit 1
}

checktarget() {
  if [ -f "pci.ids" -a -f "versions" ]
  then
    TARGET="."
  else
    echo "E: Cowardly refusing to dump data in pristine cwd"
    usage
  fi
}

checkklist() {
  if [ -f "kernels.list" ]
  then
    KLIST="kernels.list"
    return
  else
    LOC=$(dirname "$0")
    if [ -f "$LOC/kernels.list" ]
    then
      KLIST="$LOC/kernels.list"
      return
    fi
  fi
  echo "E: Couldn't find kernels.list file in default locations."
  usage
}

if [ $# -eq 2 ]
then
  KLIST="$1"
  TARGET="$2"
elif [ $# -gt 2 ]
then
  echo "E: Unknown options $@"
  usage
elif [ $# -eq 1 ]
then
  if [ -f "$1" ]    # if it's a file, then it's the kernels.list
  then
    KLIST="$1"
    checktarget
  elif [ -d "$1" ]
  then
    TARGET="$1"
    checkklist
  else
    echo "E: couldn't figure out what to do with argument: $1"
    usage
  fi
else # 0 args
  checktarget
  checkklist
fi

if [ ! -d "$TARGET" ]
then
  echo "E: Target directory doesn't exist."
  echo "E: Please create '$TARGET'"
  usage
fi

if [ ! -f $KLIST ]
then
  echo "E: Couldn't find kernels.list file in specified location."
  usage
fi

TEMPDIR=$(mktemp -t -d piccy_update.XXXXXX)

trap "if $CLEANUP; then /bin/rm -rf $TEMPDIR ; fi; exit 1" EXIT INT QUIT

# Fetch the PCI-Ids
wget -q -O $TEMPDIR/pci.ids $PCIIDURL
mv $TEMPDIR/pci.ids $TARGET/$PCIIDFILE

# Fetch the wikimap if defined
if [ -n $WIKIMAPURL ]
then
  wget -q -U Supybot $TEMPDIR/wikimap $WIKIMAPURL
  my $TEMPDIR/wikimap $TARGET/$WIKIMAPFILE
fi

# Make short replacement for /usr/bin/gpgv to suppress apt's warnings
# about keys for these repositories. The text of this was generated
# by looking at the dialogue between apt-get update and gpgv by running
# (as root):
#     /usr/bin/gpgv --status-fd 1 --ignore-time-conflict \
#      --keyring /etc/apt/trusted.gpg \
#     $WD/var/lib/apt/lists/partial/ftp.uk.debian.org_debian_dists_sid_Release.gpg \
#     $WD/var/lib/apt/lists/ftp.uk.debian.org_debian_dists_sid_Release
echo \
'#!/bin/sh
FD=${2-1}
cat <<EOF 1>&$FD
[GNUPG:] SIG_ID qs2dE7AubJyiH5mphDt+perNiA0 2009-02-25 1235551571
[GNUPG:] GOODSIG A70DAF536070D3A1 Debian Archive Automatic Signing Key (4.0/etch) <ftpmaster@debian.org>
gpgv: Good signature from "Debian Archive Automatic Signing Key (4.0/etch) <ftpmaster@debian.org>"
[GNUPG:] VALIDSIG A99951DAF9BB569BDB50AD90A70DAF536070D3A1 2009-02-25 1235551571 0 3 0 17 2 00 A99951DAF9BB569BDB50AD90A70DAF536070D3A1
EOF
' > $TEMPDIR/fakegpgv
chmod +x $TEMPDIR/fakegpgv


grep -v '^#' $KLIST |
while read line    # read from kernels.list config file
do
  echo "========================================================================"
  #echo $line
  NAME=$(echo "$line" | awk -F, '{print $1}' | awk '{$1=$1;print}')
  SRC=$(echo "$line" | awk -F, '{print $2}' | awk '{$1=$1;print}')
  MATCH=$(echo "$line" | awk -F, '{print $3}' | awk '{$1=$1;print}')

  MATCH=${MATCH:-$KERNELRE}

  echo "Release: '$NAME' from '$SRC'"
  echo "Kernel pattern: '$MATCH'"

  # Separate the working directory for each of the releases
  WD="$TEMPDIR/$NAME"

  # Create some of the directories that will be required so that apt
  # doesn't complain
  for d in /etc/apt/apt.conf.d \
           /var/lib/apt/lists/partial \
           /var/cache/apt/archives/partial \
           /var/lib/dpkg/
  do
    mkdir -p $WD$d
  done
  touch $WD/var/lib/dpkg/status

  APTARGS="-o quiet=1000
           -o Debug::NoLocking=true
           -o Dir::State=$WD/var/lib/apt
           -o Dir::State::status=$WD/var/lib/dpkg/status
           -o Dir=$WD
           -o APT::Architecture=$ARCH
           -o APT::Get::AllowUnauthenticated=true
           -o Dir::Bin::gpg=$TEMPDIR/fakegpgv
"
#            -o Aptitude::Debtags-Binary=/bin/true

  # Create the sources.list and then grab the Packages file
  echo "$SRC" > $WD/etc/apt/sources.list
  apt-get $APTARGS update

  # Find the latest version of the kernel that matches the regexp
  KERNEL=$(aptitude $APTARGS search ~n"$MATCH" -F'%p' | tail -1)

  if [ -z "$KERNEL" ]
  then
    echo "E: No package matching '$MATCH' could not be found for release $NAME"
    continue
  fi

  # Work out what actual filename of the kernel package will be and the
  # version string of the kernel
  KERNELDEB=$(apt-cache $APTARGS show $KERNEL | sed -n "s,Filename:\s*.*/\([^/]*\),\1,p")
  PKGVER=$(apt-cache $APTARGS show $KERNEL | sed -n "s,Version:\s*\([^\s]*\),\1,p")
  VER=$(echo $KERNEL | sed "s,linux-image-\(.*\),\1,")

  (cd $WD && aptitude $APTARGS download $KERNEL > /dev/null)

  # Because aptitude download is run in a subshell, its failure won't
  # cause the entire script to die. Note the failure and keep going.
  if [ ! -f $WD/$KERNELDEB ]
  then
    echo "E: Package '$KERNEL' could not be found for release $NAME"
    continue
  fi

  # Unpack the kernel package and create the modules map
  dpkg -x $WD/$KERNELDEB $WD
  # If this is running on a squeeze or later machine, -m is also needed for depmod
  DEPMODARGS=$(dpkg --compare-versions $(depmod -V | cut -f2 -d\ ) gt 3.6 && echo -m)
  /sbin/depmod $DEPMODARGS -b $WD $VER

  # Copy out the map file and kernel config
  cp $WD/lib/modules/*/modules.pcimap $TARGET/modules.pcimap-$NAME
  cp $WD/boot/config-* $TARGET/config-$NAME

  # Record the versions of the kernels that have been obtained in the
  # file "versions". Create this file first if it doesn't exist.
  if [ ! -f $TARGET/versions ]
  then
    cat <<EOF >$TARGET/versions
# List of kernel versions found in the archive
# Format:
#   release,  package version,  uname -r
EOF
  fi

  # If it's a new kernel, add it to the list, otherwise edit the current entry
  if grep -q "^\s*$NAME\s*," $TARGET/versions
  then
    sed -i "s/^\s*$NAME\s*,.*/$NAME, $PKGVER, $VER/" $TARGET/versions
  else
    echo "$NAME, $PKGVER, $VER" >> $TARGET/versions
  fi

  # Clean up the downloads so far to reduce disk usage during multiple updates
  rm -rf $WD
done

# Clean up the tempdir before exit
if $CLEANUP
then 
  /bin/rm -rf $TEMPDIR
fi

exit 0
